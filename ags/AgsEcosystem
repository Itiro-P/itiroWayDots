// ../../../../usr/share/astal/gjs/gtk4/index.ts
import Astal6 from "gi://Astal?version=4.0";
import Gtk4 from "gi://Gtk?version=4.0";
import Gdk2 from "gi://Gdk?version=4.0";

// ../../../../usr/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../usr/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind2 = new _Binding(this.#emitter, this.#prop);
    bind2.transformFn = (v) => fn(this.transformFn(v));
    return bind2;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../usr/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}

// ../../../../usr/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../usr/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec === "function") {
      this.pollFn = exec;
      delete this.pollExec;
    } else {
      this.pollExec = exec;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../usr/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler2 = props[key];
      delete props[key];
      return [...acc, [sig, handler2]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../usr/share/astal/gjs/gtk4/astalify.ts
import Gtk from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";
var type = Symbol("child type");
var dummyBulder = new Gtk.Builder();
function _getChildren(widget) {
  if ("get_child" in widget && typeof widget.get_child == "function") {
    return widget.get_child() ? [widget.get_child()] : [];
  }
  const children = [];
  let ch = widget.get_first_child();
  while (ch !== null) {
    children.push(ch);
    ch = ch.get_next_sibling();
  }
  return children;
}
function _setChildren(widget, children) {
  children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
  for (const child of children) {
    widget.vfunc_add_child(
      dummyBulder,
      child,
      type in child ? child[type] : null
    );
  }
}
function astalify(cls, config = {}) {
  Object.assign(cls.prototype, {
    [setChildren](children) {
      const w = this;
      for (const child of config.getChildren?.(w) || _getChildren(w)) {
        if (child instanceof Gtk.Widget) {
          child.unparent();
          if (!children.includes(child) && noImplicitDestroy in this)
            child.run_dispose();
        }
      }
      if (config.setChildren) {
        config.setChildren(w, children);
      } else {
        _setChildren(w, children);
      }
    }
  });
  return {
    [cls.name]: (props = {}, ...children) => {
      const widget = new cls("cssName" in props ? { cssName: props.cssName } : {});
      if ("cssName" in props) {
        delete props.cssName;
      }
      if (props.noImplicitDestroy) {
        Object.assign(widget, { [noImplicitDestroy]: true });
        delete props.noImplicitDestroy;
      }
      if (props.type) {
        Object.assign(widget, { [type]: props.type });
        delete props.type;
      }
      if (children.length > 0) {
        Object.assign(props, { children });
      }
      return construct(widget, setupControllers(widget, props));
    }
  }[cls.name];
}
function setupControllers(widget, {
  onFocusEnter,
  onFocusLeave,
  onKeyPressed,
  onKeyReleased,
  onKeyModifier,
  onLegacy,
  onButtonPressed,
  onButtonReleased,
  onHoverEnter,
  onHoverLeave,
  onMotion,
  onScroll,
  onScrollDecelerate,
  ...props
}) {
  if (onFocusEnter || onFocusLeave) {
    const focus = new Gtk.EventControllerFocus();
    widget.add_controller(focus);
    if (onFocusEnter)
      focus.connect("enter", () => onFocusEnter(widget));
    if (onFocusLeave)
      focus.connect("leave", () => onFocusLeave(widget));
  }
  if (onKeyPressed || onKeyReleased || onKeyModifier) {
    const key = new Gtk.EventControllerKey();
    widget.add_controller(key);
    if (onKeyPressed)
      key.connect("key-pressed", (_, val, code, state) => onKeyPressed(widget, val, code, state));
    if (onKeyReleased)
      key.connect("key-released", (_, val, code, state) => onKeyReleased(widget, val, code, state));
    if (onKeyModifier)
      key.connect("modifiers", (_, state) => onKeyModifier(widget, state));
  }
  if (onLegacy || onButtonPressed || onButtonReleased) {
    const legacy = new Gtk.EventControllerLegacy();
    widget.add_controller(legacy);
    legacy.connect("event", (_, event) => {
      if (event.get_event_type() === Gdk.EventType.BUTTON_PRESS) {
        onButtonPressed?.(widget, event);
      }
      if (event.get_event_type() === Gdk.EventType.BUTTON_RELEASE) {
        onButtonReleased?.(widget, event);
      }
      onLegacy?.(widget, event);
    });
  }
  if (onMotion || onHoverEnter || onHoverLeave) {
    const hover = new Gtk.EventControllerMotion();
    widget.add_controller(hover);
    if (onHoverEnter)
      hover.connect("enter", (_, x, y) => onHoverEnter(widget, x, y));
    if (onHoverLeave)
      hover.connect("leave", () => onHoverLeave(widget));
    if (onMotion)
      hover.connect("motion", (_, x, y) => onMotion(widget, x, y));
  }
  if (onScroll || onScrollDecelerate) {
    const scroll = new Gtk.EventControllerScroll();
    scroll.flags = Gtk.EventControllerScrollFlags.BOTH_AXES | Gtk.EventControllerScrollFlags.KINETIC;
    widget.add_controller(scroll);
    if (onScroll)
      scroll.connect("scroll", (_, x, y) => onScroll(widget, x, y));
    if (onScrollDecelerate)
      scroll.connect("decelerate", (_, x, y) => onScrollDecelerate(widget, x, y));
  }
  return props;
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Astal4 from "gi://Astal?version=4.0";

// ../../../../usr/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "binds");
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris2, Player }) => {
  patch(Mpris2.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi: Wifi2 }) => {
  patch(Wifi2.prototype, "access_points");
  patch(Wifi2.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio, Video }) => {
  patch(Wp2.prototype, "endpoints");
  patch(Wp2.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../usr/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../usr/share/astal/gjs/gtk4/app.ts
Gtk2.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal4.Application);

// ../../../../usr/share/astal/gjs/gtk4/widget.ts
import Astal5 from "gi://Astal?version=4.0";
import Gtk3 from "gi://Gtk?version=4.0";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal5.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = astalify(Astal5.Box, {
  getChildren(self) {
    return self.get_children();
  },
  setChildren(self, children) {
    return self.set_children(filter(children));
  }
});
var Button = astalify(Gtk3.Button);
var CenterBox = astalify(Gtk3.CenterBox, {
  getChildren(box) {
    return [box.startWidget, box.centerWidget, box.endWidget];
  },
  setChildren(box, children) {
    const ch = filter(children);
    box.startWidget = ch[0] || new Gtk3.Box();
    box.centerWidget = ch[1] || new Gtk3.Box();
    box.endWidget = ch[2] || new Gtk3.Box();
  }
});
var Entry = astalify(Gtk3.Entry, {
  getChildren() {
    return [];
  }
});
var Image = astalify(Gtk3.Image, {
  getChildren() {
    return [];
  }
});
var Label = astalify(Gtk3.Label, {
  getChildren() {
    return [];
  },
  setChildren(self, children) {
    self.label = String(children);
  }
});
var LevelBar = astalify(Gtk3.LevelBar, {
  getChildren() {
    return [];
  }
});
var Overlay = astalify(Gtk3.Overlay, {
  getChildren(self) {
    const children = [];
    let ch = self.get_first_child();
    while (ch !== null) {
      children.push(ch);
      ch = ch.get_next_sibling();
    }
    return children.filter((ch2) => ch2 !== self.child);
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      const types = type in child ? child[type].split(/\s+/) : [];
      if (types.includes("overlay")) {
        self.add_overlay(child);
      } else {
        self.set_child(child);
      }
      self.set_measure_overlay(child, types.includes("measure"));
      self.set_clip_overlay(child, types.includes("clip"));
    }
  }
});
var Revealer = astalify(Gtk3.Revealer);
var Slider = astalify(Astal5.Slider, {
  getChildren() {
    return [];
  }
});
var Stack = astalify(Gtk3.Stack, {
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child.name != "" && child.name != null) {
        self.add_named(child, child.name);
      } else {
        self.add_child(child);
      }
    }
  }
});
var Switch = astalify(Gtk3.Switch, {
  getChildren() {
    return [];
  }
});
var Window = astalify(Astal5.Window);
var MenuButton = astalify(Gtk3.MenuButton, {
  getChildren(self) {
    return [self.popover, self.child];
  },
  setChildren(self, children) {
    for (const child of filter(children)) {
      if (child instanceof Gtk3.Popover) {
        self.set_popover(child);
      } else {
        self.set_child(child);
      }
    }
  }
});
var Popover = astalify(Gtk3.Popover);

// sass:/home/itiro/.config/ags/style.scss
var style_default = 'button, button *, popover, popover *, * {\n  font-family: "Monospace";\n  font-size: 16px;\n  -gtk-icon-size: 16px;\n  color: #cdd6f4;\n  background: transparent;\n  border-width: 0;\n  border-style: none;\n  box-shadow: none;\n  outline: none;\n  margin: 0;\n  padding: 0;\n}\n\n.Background {\n  padding: 20px;\n  margin: 5px;\n  background-color: #1e1e2e;\n  border-radius: 50px;\n  transition: all 0.2s ease-in-out;\n  opacity: 0.5;\n}\n.Background .Media {\n  border: 2px solid #74c7ec;\n  border-radius: 10px;\n  background-color: #1e1e2e;\n}\n.Background .Media * {\n  transition: all 0.2s ease-in-out;\n}\n.Background .Media .MprisInfo {\n  padding: 5px;\n  border-radius: 0 0 7px 7px;\n  background-color: #1e1e2e;\n}\n.Background .Media .MprisInfo .MprisLabel {\n  color: #74c7ec;\n}\n.Background .Media .CavaContainer {\n  border-radius: 6px 6px 0px 0px;\n  color: #74c7ec;\n  background: none;\n}\n.Background .MediaPlaying .CavaContainer {\n  color: #74c7ec;\n  background: none;\n}\n.Background .MediaPlaying .MprisInfo {\n  background-color: #74c7ec;\n}\n.Background .MediaPlaying .MprisInfo .MprisLabel {\n  color: #1e1e2e;\n}\n.Background .MediaPlaying:hover .CavaContainer {\n  color: #1e1e2e;\n  background-color: #74c7ec;\n}\n.Background .MediaPlaying:hover .MprisInfo {\n  background-color: #1e1e2e;\n}\n.Background .MediaPlaying:hover .MprisInfo .MprisLabel {\n  color: #74c7ec;\n}\n.Background .DateTime * {\n  transition: all 0.2s ease-in-out;\n  border-radius: 10px;\n}\n.Background .DateTime .Time {\n  transition: all 0.2s ease-in-out;\n}\n.Background .DateTime .Time .TimeLabel {\n  font-weight: bold;\n  font-size: 90px;\n}\n.Background .DateTime .Time popover > contents {\n  padding: 5px;\n  background: #313244;\n  border: 2px solid #74c7ec;\n}\n.Background .DateTime .Time popover > contents .CalendarContainer {\n  background-color: #1e1e2e;\n  color: #cdd6f4;\n}\n.Background .DateTime .Time popover > contents .CalendarContainer label.today {\n  background-color: #89b4fa;\n  border: none;\n  color: #1e1e2e;\n}\n.Background .DateTime .Time popover > contents .CalendarContainer label:selected {\n  background-color: #b4befe;\n  border: none;\n  color: #1e1e2e;\n}\n.Background .DateTime .Time:hover {\n  background-color: #74c7ec;\n}\n.Background .DateTime .Time:hover .TimeLabel {\n  color: #181825;\n}\n.Background .DateTime .Date {\n  font-size: 40px;\n}\n.Background:hover {\n  opacity: 0.9;\n}\n\n.SystemMonitor, .AudioControl, .SystemTray, .Wired, .Wifi, .MiniTime {\n  background-color: #1e1e2e;\n  border: 2px solid #89b4fa;\n  border-radius: 10px;\n  padding: 0px 2px;\n  margin: 0px 2px;\n}\n\n.CpuUsage, .MemoryUsage, .Battery, .IconBtn, .LabelAudioControl, .AudioControlBtn, .TrayItem, .Wired, .Wifi, .MiniTime {\n  padding: 1px 4px;\n}\n\n.BatteryIcon, .CpuUsageIcon, .MemoryUsageIcon {\n  margin: 0px 5px 0px 0px;\n}\n\n.CpuUsage .CpuUsageIcon, .CpuUsage .CpuUsageLabel {\n  color: #a6e3a1;\n}\n\n.MemoryUsage .MemoryUsageIcon, .MemoryUsage .MemoryUsageLabel {\n  color: #fab387;\n}\n\n.Battery .BatteryIcon, .Battery .BatteryLabel {\n  color: #b4befe;\n}\n\n.BatteryCritical .BatteryIcon, .BatteryCritical .BatteryLabel {\n  color: #f38ba8;\n}\n\n.TrayItem popover.menu {\n  margin: 10px;\n  background-color: #313244;\n  border-radius: 10px;\n  padding: 5px;\n}\n.TrayItem popover.menu > contents {\n  padding: 5px;\n}\n.TrayItem popover.menu modelbutton {\n  padding: 2px;\n  border-radius: 4px;\n  margin: 0 2px;\n}\n.TrayItem popover.menu modelbutton:hover {\n  background: rgba(69, 71, 90, 0.2);\n}\n.TrayItem popover.menu modelbutton:active {\n  background: rgba(69, 71, 90, 0.4);\n}\n\ntooltip {\n  background-color: #1e1e2e;\n  color: #cdd6f4;\n  border-radius: 8px;\n  padding: 8px 12px;\n  border: 1px solid #313244;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}';

// modules/SystemMonitor.tsx
import AstalBattery from "gi://AstalBattery";

// ../../../../usr/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../usr/share/astal/gjs/file.ts
import Astal7 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../usr/share/astal/gjs/gobject.ts
import GObject2 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject2;

// modules/SystemMonitor.tsx
import GTop from "gi://GTop?version=2.0";

// ../../../../usr/share/astal/gjs/gtk4/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  // circularprogress: Widget.CircularProgress,
  // drawingarea: Widget.DrawingArea,
  entry: Entry,
  image: Image,
  label: Label,
  levelbar: LevelBar,
  overlay: Overlay,
  revealer: Revealer,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window,
  menubutton: MenuButton,
  popover: Popover
};
var jsxs = jsx2;

// modules/SystemMonitor.tsx
function formatTime(seconds) {
  return `${Math.floor(seconds / 3600)}h${Math.floor(seconds % 3600 / 60)}m`;
}
var milliseconds = 2e3;
var cpu = new GTop.glibtop_cpu();
var mem = new GTop.glibtop_mem();
var battery = AstalBattery.get_default();
var cpuData = {
  prev: { user: 0, sys: 0, total: 0 },
  diff: { user: 0, sys: 0, total: 0 }
};
GTop.glibtop_get_cpu(cpu);
cpuData.prev.user = cpu.user;
cpuData.prev.sys = cpu.sys;
cpuData.prev.total = cpu.total;
var metrics = Variable({ cpu: 0, mem: 0 }).poll(
  milliseconds,
  () => {
    try {
      const prevUser = cpuData.prev.user;
      const prevSys = cpuData.prev.sys;
      const prevTotal = cpuData.prev.total;
      GTop.glibtop_get_cpu(cpu);
      GTop.glibtop_get_mem(mem);
      cpuData.diff.user = cpu.user - prevUser;
      cpuData.diff.sys = cpu.sys - prevSys;
      cpuData.diff.total = cpu.total - prevTotal;
      cpuData.prev.user = cpu.user;
      cpuData.prev.sys = cpu.sys;
      cpuData.prev.total = cpu.total;
      const cpuPercent = cpuData.diff.total > 0 ? Math.round((cpuData.diff.user + cpuData.diff.sys) / cpuData.diff.total * 100) : 0;
      const memPercent = mem.total > 0 ? Math.round(mem.user / mem.total * 100) : 0;
      return {
        cpu: Math.max(0, Math.min(100, cpuPercent)),
        mem: Math.max(0, Math.min(100, memPercent))
      };
    } catch (error) {
      console.warn("Erro ao obter m\xE9tricas do sistema:", error);
      return { cpu: 0, mem: 0 };
    }
  }
);
var CpuUsage = () => {
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["CpuUsage"], children: [
    /* @__PURE__ */ jsx2("label", { cssClasses: ["CpuUsageIcon"], label: "" }),
    /* @__PURE__ */ jsx2("label", { cssClasses: ["CpuUsageLabel"], label: bind(metrics).as((m) => `${m.cpu}%`) })
  ] });
};
var MemoryUsage = () => {
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["MemoryUsage"], children: [
    /* @__PURE__ */ jsx2("label", { cssClasses: ["MemoryUsageIcon"], label: "" }),
    /* @__PURE__ */ jsx2("label", { cssClasses: ["MemoryUsageLabel"], label: bind(metrics).as((m) => `${m.mem}%`) })
  ] });
};
var batteryHandler = null;
var Battery = () => {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["Battery"],
      tooltipText: bind(battery, "charging").as(() => {
        try {
          const isCharging = battery.get_charging();
          const timeRemaining = isCharging ? battery.time_to_full : battery.time_to_empty;
          const action = isCharging ? "Carregando" : "Descarregando";
          return `${action}: ${formatTime(timeRemaining)} restante(s)`;
        } catch {
          return "Informa\xE7\xF5es da bateria indispon\xEDveis";
        }
      }),
      setup: (self) => {
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
        }
        batteryHandler = battery.connect("notify::charging", () => {
          try {
            if (battery.percentage <= 0.2 && !battery.charging) {
              self.add_css_class("BatteryCritical");
            } else {
              self.remove_css_class("BatteryCritical");
            }
          } catch (error) {
            console.warn("Erro ao verificar status da bateria:", error);
          }
        });
      },
      onDestroy: () => {
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
          batteryHandler = null;
        }
      },
      children: [
        /* @__PURE__ */ jsx2("image", { cssClasses: ["BatteryIcon"], iconName: bind(battery, "iconName") }),
        /* @__PURE__ */ jsx2("label", { label: bind(battery, "percentage").as((p) => {
          try {
            return `${Math.round(Math.max(0, Math.min(100, p * 100)))}%`;
          } catch {
            return "0%";
          }
        }) })
      ]
    }
  );
};
function SystemMonitor() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["SystemMonitor"],
      onDestroy: () => {
        metrics.drop();
        if (batteryHandler) {
          battery.disconnect(batteryHandler);
          batteryHandler = null;
        }
      },
      children: [
        /* @__PURE__ */ jsx2(CpuUsage, {}),
        /* @__PURE__ */ jsx2(MemoryUsage, {}),
        /* @__PURE__ */ jsx2(Battery, {})
      ]
    }
  );
}

// modules/AudioControl.tsx
import Wp from "gi://AstalWp";
function AudioControl() {
  const audio = Wp.get_default().defaultSpeaker;
  const step = 0.02;
  const scroll = new Gtk4.EventControllerScroll({ flags: Gtk4.EventControllerScrollFlags.VERTICAL });
  const click = { left: new Gtk4.GestureClick(), right: new Gtk4.GestureClick() };
  click.left.set_button(Gdk2.BUTTON_PRIMARY);
  click.right.set_button(Gdk2.BUTTON_SECONDARY);
  const handlers2 = [
    scroll.connect("scroll", (controler, dx, dy) => {
      audio.volume = dy < 0 ? Math.min(audio.get_volume() + step, 1) : audio.get_volume() - step;
    }),
    click.left.connect("pressed", () => {
      audio.set_mute(!audio.get_mute());
    }),
    click.right.connect("pressed", () => {
      default2.spawn_command_line_async("pavucontrol");
    })
  ];
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["AudioControl"],
      setup: (self) => {
        self.add_controller(click.left);
        self.add_controller(click.right);
        self.add_controller(scroll);
      },
      onDestroy: () => {
        scroll.disconnect(handlers2[0]);
        click.left.disconnect(handlers2[1]);
        click.right.disconnect(handlers2[2]);
      },
      tooltipText: bind(audio, "description").as((n) => `Dispositivo atual: ${n}`),
      children: [
        /* @__PURE__ */ jsx2(
          "image",
          {
            cssClasses: ["AudioControlBtn"],
            iconName: bind(audio, "volumeIcon")
          }
        ),
        /* @__PURE__ */ jsx2(
          "label",
          {
            cssClasses: ["LabelAudioControl"],
            label: bind(audio, "volume").as((a) => `${Math.round(a * 100)}%`)
          }
        )
      ]
    }
  );
}

// modules/Network.tsx
import AstalNetwork from "gi://AstalNetwork";
var stateTexts = {
  [AstalNetwork.DeviceState.UNKNOWN]: "Desconhecido",
  [AstalNetwork.DeviceState.UNMANAGED]: "N\xE3o gerenciado",
  [AstalNetwork.DeviceState.UNAVAILABLE]: "Indispon\xEDvel",
  [AstalNetwork.DeviceState.DISCONNECTED]: "Desconectado",
  [AstalNetwork.DeviceState.PREPARE]: "Preparando",
  [AstalNetwork.DeviceState.CONFIG]: "Configurando",
  [AstalNetwork.DeviceState.NEED_AUTH]: "Necessita autentica\xE7\xE3o",
  [AstalNetwork.DeviceState.IP_CONFIG]: "Configurando IP",
  [AstalNetwork.DeviceState.IP_CHECK]: "Verificando IP",
  [AstalNetwork.DeviceState.SECONDARIES]: "Configurando secund\xE1rios",
  [AstalNetwork.DeviceState.ACTIVATED]: "Ativado",
  [AstalNetwork.DeviceState.DEACTIVATING]: "Desconectado",
  [AstalNetwork.DeviceState.FAILED]: "Falha"
};
function stateString(s) {
  return stateTexts[s] ?? "Estado desconhecido";
}
var network = AstalNetwork.get_default();
var stats = Variable(
  {
    wifi: {
      name: network.wifi.device.get_iface(),
      ssid: network.wifi.ssid ?? "",
      state: network.wifi.state ?? AstalNetwork.DeviceState.UNKNOWN
    },
    wired: {
      name: network.wired?.device.get_iface() ?? "Sem dispositivo",
      state: AstalNetwork.DeviceState.UNKNOWN
    }
  }
);
var handlers = [
  network.wifi.connect(
    "state-changed",
    () => {
      stats.set(
        {
          ...stats.get(),
          wifi: {
            name: network.wifi.device.get_iface() ?? "Sem dispositivo",
            ssid: network.wifi.ssid ?? "",
            state: network.wifi.state ?? AstalNetwork.DeviceState.UNAVAILABLE
          }
        }
      );
    }
  )
];
function Wifi() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["Wifi"], children: /* @__PURE__ */ jsx2(
    "label",
    {
      maxWidthChars: 20,
      label: bind(stats).as((s) => s.wifi.state === AstalNetwork.DeviceState.ACTIVATED || s.wifi.state === AstalNetwork.DeviceState.SECONDARIES ? `${s.wifi.name}: ${s.wifi.ssid}` : `${s.wifi.name}: ${stateString(s.wifi.state)}`)
    }
  ) });
}
function Wired() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["Wired"], children: /* @__PURE__ */ jsx2(
    "label",
    {
      maxWidthChars: 20,
      label: bind(stats).as((s) => s.wired.state === AstalNetwork.DeviceState.ACTIVATED || s.wired.state === AstalNetwork.DeviceState.SECONDARIES ? `${s.wired.name}: Connectado` : `${s.wired.name}${s.wired.name === "Sem dispositivo" ? "" : ": " + stateString(s.wired.state)}`)
    }
  ) });
}
function Network() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["Network"],
      onDestroy: () => {
        stats.drop();
        network.wifi.disconnect(handlers[0]);
      },
      children: [
        /* @__PURE__ */ jsx2(Wifi, {}),
        /* @__PURE__ */ jsx2(Wired, {})
      ]
    }
  );
}

// modules/SystemTray.tsx
import Tray from "gi://AstalTray";
function TrayItem({ item }) {
  let handlers2 = {
    primary: 0,
    middle: 0,
    secondary: 0,
    menuModel: 0,
    actionG: 0
  };
  const clickPrimary = new Gtk4.GestureClick({ button: Gdk2.BUTTON_PRIMARY });
  const clickSecondary = new Gtk4.GestureClick({ button: Gdk2.BUTTON_SECONDARY });
  const clickMiddle = new Gtk4.GestureClick({ button: Gdk2.BUTTON_MIDDLE });
  return /* @__PURE__ */ jsx2(
    "menubutton",
    {
      cssClasses: ["TrayItem"],
      tooltipText: bind(item, "tooltipMarkup"),
      menuModel: item.menuModel,
      usePopover: true,
      direction: Gtk4.ArrowType.DOWN,
      setup: (self) => {
        handlers2 = {
          primary: clickPrimary.connect("pressed", (_self, _n, x, y) => {
            if (item.is_menu) self.get_popover().popup();
            else item.activate(x, y);
          }),
          middle: clickMiddle.connect("pressed", (_self, _n, x, y) => {
            item.secondary_activate(x, y);
          }),
          secondary: clickSecondary.connect("pressed", () => {
            item.about_to_show();
            self.get_popover().popup();
          }),
          menuModel: item.connect("notify::menu-model", () => {
            self.set_menu_model(item.menuModel);
          }),
          actionG: item.connect("notify::action-group", () => {
            self.insert_action_group("dbusmenu", item.actionGroup);
          })
        };
        self.add_controller(clickPrimary);
        self.add_controller(clickMiddle);
        self.add_controller(clickSecondary);
      },
      onDestroy: (self) => {
        clickPrimary.disconnect(handlers2.primary);
        clickMiddle.disconnect(handlers2.middle);
        clickSecondary.disconnect(handlers2.secondary);
        item.disconnect(handlers2.menuModel);
        item.disconnect(handlers2.actionG);
        self.remove_controller(clickPrimary);
        self.remove_controller(clickMiddle);
        self.remove_controller(clickSecondary);
      },
      children: /* @__PURE__ */ jsx2("image", { gicon: bind(item, "gicon"), pixelSize: 16 })
    }
  );
}
function SystemTray() {
  const tray = Tray.get_default();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      cssClasses: ["SystemTray"],
      orientation: Gtk4.Orientation.HORIZONTAL,
      spacing: 4,
      marginEnd: 8,
      children: bind(tray, "items").as(
        (items) => items.map(
          (item) => /* @__PURE__ */ jsx2(TrayItem, { item })
        )
      )
    }
  );
}

// modules/DateTime.tsx
var time = Variable({ clock: "", date: "" }).poll(
  6e4,
  () => {
    const dateConstructor = /* @__PURE__ */ new Date();
    return {
      clock: dateConstructor.toLocaleTimeString("pt-br", { hour: "2-digit", minute: "2-digit" }),
      date: dateConstructor.toLocaleDateString("pt-br", { weekday: "long", day: "numeric", month: "long", year: "numeric" }).replace(/^./, (char) => char.toUpperCase())
    };
  }
);
var Calendar = astalify(Gtk4.Calendar, {
  getChildren(self) {
    return [];
  },
  setChildren(self, children) {
  }
});
function MenuCalendar() {
  const selectedDate = Variable("Nenhuma data selecionada");
  return /* @__PURE__ */ jsxs("box", { cssClasses: ["Calendar"], orientation: Gtk4.Orientation.VERTICAL, onDestroy: () => {
    selectedDate.drop();
  }, children: [
    /* @__PURE__ */ jsx2("label", { cssClasses: ["CalendarLabel"], label: bind(selectedDate) }),
    /* @__PURE__ */ jsx2(
      Calendar,
      {
        cssClasses: ["CalendarContainer"],
        setup: (self) => {
          const daySelectedId = self.connect("day-selected", () => {
            const date = self.get_date();
            selectedDate.set(`Selecionado: ${date.format("%d-%m-%Y")}`);
          });
          return () => {
            self.disconnect(daySelectedId);
          };
        }
      }
    )
  ] });
}
function DateTime() {
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["DateTime"],
      orientation: Gtk4.Orientation.VERTICAL,
      onDestroy: () => {
        time.drop();
      },
      children: [
        /* @__PURE__ */ jsxs("menubutton", { cssClasses: ["Time"], halign: Gtk4.Align.END, children: [
          /* @__PURE__ */ jsx2("label", { cssClasses: ["TimeLabel"], label: bind(time).as((t) => `${t.clock}`) }),
          /* @__PURE__ */ jsx2("popover", { position: Gtk4.PositionType.TOP, children: /* @__PURE__ */ jsx2(MenuCalendar, {}) })
        ] }),
        /* @__PURE__ */ jsx2("label", { cssClasses: ["Date"], label: bind(time).as((t) => `${t.date}`) })
      ]
    }
  );
}
function MiniTime() {
  const shouldReveal = Variable(false);
  const transitionSpeed = 750;
  function toggleReveal() {
    shouldReveal.set(!shouldReveal.get());
  }
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: ["MiniTime"],
      onDestroy: () => {
        time.drop();
        shouldReveal.drop();
      },
      onHoverEnter: () => toggleReveal(),
      onHoverLeave: () => toggleReveal(),
      children: [
        /* @__PURE__ */ jsx2(
          "revealer",
          {
            revealChild: bind(shouldReveal).as((s) => !s),
            transitionType: Gtk4.RevealerTransitionType.SLIDE_LEFT,
            transitionDuration: transitionSpeed / 4,
            children: /* @__PURE__ */ jsx2("label", { label: bind(time).as((t) => `${t.clock}`) })
          }
        ),
        /* @__PURE__ */ jsx2(
          "revealer",
          {
            revealChild: bind(shouldReveal).as((s) => s),
            transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
            transitionDuration: transitionSpeed,
            children: /* @__PURE__ */ jsx2("label", { label: bind(time).as((t) => `Hoje \xE9: ${t.date}`) })
          }
        )
      ]
    }
  );
}

// widget/Bar.tsx
function Bar(gdkmonitor) {
  const { TOP, LEFT, RIGHT } = Astal6.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      visible: true,
      gdkmonitor,
      exclusivity: Astal6.Exclusivity.EXCLUSIVE,
      anchor: TOP | RIGHT | LEFT,
      application: app_default,
      children: /* @__PURE__ */ jsxs("centerbox", { cssClasses: ["Bar"], halign: Gtk4.Align.FILL, children: [
        /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2(SystemTray, {}) }),
        /* @__PURE__ */ jsx2("box", { halign: Gtk4.Align.CENTER, children: /* @__PURE__ */ jsx2(MiniTime, {}) }),
        /* @__PURE__ */ jsxs("box", { halign: Gtk4.Align.END, children: [
          /* @__PURE__ */ jsx2(Network, {}),
          /* @__PURE__ */ jsx2(AudioControl, {}),
          /* @__PURE__ */ jsx2(SystemMonitor, {})
        ] })
      ] })
    }
  );
}

// modules/Media.tsx
import Mpris from "gi://AstalMpris";

// modules/Cava.tsx
import Gsk from "gi://Gsk";
import AstalCava from "gi://AstalCava?version=0.1";
import GObject3 from "gi://GObject";
import Graphene from "gi://Graphene?version=1.0";
var CavaConfig = {
  autosens: true,
  bars: 40,
  barWidth: 20,
  barHeight: 140,
  framerate: 60,
  input: AstalCava.Input.PIPEWIRE,
  noiseReduction: 0.77,
  sensitivity: 0.75,
  stereo: false,
  lerpFactor: 1
};
var cavaInstance = AstalCava.get_default();
var handler = null;
var Cava = GObject3.registerClass({ GTypeName: "Cava" }, class Cava2 extends Gtk4.DrawingArea {
  _rect = new Graphene.Rect();
  _size = new Graphene.Size();
  builder = new Gsk.PathBuilder();
  clip;
  values;
  norm;
  _isDestroyed = false;
  constructor() {
    super();
    this.setupRect();
    this.setupCava();
  }
  setupRect() {
    this.set_size_request(CavaConfig.barWidth * CavaConfig.bars, CavaConfig.barHeight);
    this.clip = new Gsk.RoundedRect();
    this._size.init(7, 7);
    this._rect.init(0, 0, this.get_allocated_width(), this.get_allocated_height());
    this.clip.init(this._rect, this._size, this._size, Graphene.Size.zero(), Graphene.Size.zero());
  }
  setupCava() {
    if (cavaInstance) {
      try {
        cavaInstance.set_autosens(CavaConfig.autosens);
        cavaInstance.set_bars(CavaConfig.bars);
        cavaInstance.set_framerate(CavaConfig.framerate);
        cavaInstance.set_input(CavaConfig.input);
        cavaInstance.set_noise_reduction(CavaConfig.noiseReduction);
        cavaInstance.set_stereo(CavaConfig.stereo);
        this.add_css_class("CavaContainer");
        this.values = new Float32Array(CavaConfig.bars);
        this.norm = new Float32Array(CavaConfig.bars);
        if (handler) {
          cavaInstance.disconnect(handler);
        }
        handler = cavaInstance.connect("notify::values", () => {
          if (!this._isDestroyed) {
            this.queue_draw();
          }
        });
      } catch (error) {
        console.warn("Erro ao configurar Cava:", error);
      }
    }
  }
  vfunc_size_allocate(width, height) {
    this.clip = null;
    super.vfunc_size_allocate(width, height, -1);
  }
  vfunc_snapshot(snapshot) {
    if (!cavaInstance || this._isDestroyed) return;
    try {
      if (!this.clip) {
        this.clip = new Gsk.RoundedRect();
        this._rect.init(0, 0, this.get_allocated_width(), this.get_allocated_height());
        this.clip.init(this._rect, this._size, this._size, Graphene.Size.zero(), Graphene.Size.zero());
      }
      snapshot.push_rounded_clip(this.clip);
      this.draw_catmull_rom(snapshot);
      snapshot.pop();
    } catch (error) {
      console.warn("Erro no snapshot do Cava:", error);
    }
  }
  // Code from Kotontrion. See https://github.com/kotontrion/kompass/blob/main/libkompass/src/cava.vala
  draw_catmull_rom(snapshot) {
    if (!cavaInstance || this._isDestroyed) return;
    try {
      if (!this.builder) this.builder = new Gsk.PathBuilder();
      const width = this.get_allocated_width();
      const height = this.get_allocated_height();
      const raw = cavaInstance.get_values();
      if (!raw || raw.length === 0) return;
      const bars = Math.min(CavaConfig.bars, raw.length);
      const barWidth = width / Math.max(1, bars - 1);
      const color = this.get_color();
      const sens = CavaConfig.sensitivity;
      const lerp = CavaConfig.lerpFactor;
      const invSix = 1 / 6;
      if (!this.values || this.values.length !== bars) {
        this.values = new Float32Array(bars);
      }
      if (!this.norm || this.norm.length !== bars) {
        this.norm = new Float32Array(bars);
      }
      for (let i = 0; i < bars; i++) {
        const vRaw = (raw[i] || 0) * sens;
        const v = this.values[i] += (vRaw - this.values[i]) * lerp;
        this.norm[i] = height - height * Math.max(0, Math.min(1, v));
      }
      this.builder.move_to(0, this.norm[0]);
      for (let i = 0; i < bars - 1; i++) {
        const p0x = (i - 1) * barWidth;
        const p0y = this.norm[i > 0 ? i - 1 : 0];
        const p1x = i * barWidth;
        const p1y = this.norm[i];
        const p2x = (i + 1) * barWidth;
        const p2y = this.norm[i + 1];
        const p3x = (i + 2) * barWidth;
        const p3y = this.norm[i + 2 < bars ? i + 2 : bars - 1];
        const c1x = p1x + (p2x - p0x) * invSix;
        const c1y = p1y + (p2y - p0y) * invSix;
        const c2x = p2x - (p3x - p1x) * invSix;
        const c2y = p2y - (p3y - p1y) * invSix;
        this.builder.cubic_to(c1x, c1y, c2x, c2y, p2x, p2y);
      }
      this.builder.line_to(width, height);
      this.builder.line_to(0, height);
      snapshot.append_fill(this.builder.to_path(), Gsk.FillRule.WINDING, color);
    } catch (error) {
      console.warn("Erro ao desenhar Cava:", error);
    }
  }
  destroy() {
    this._isDestroyed = true;
    if (handler && cavaInstance) {
      try {
        cavaInstance.disconnect(handler);
      } catch (error) {
        console.warn("Erro ao desconectar handler do Cava:", error);
      }
      handler = null;
    }
  }
});
function CavaContainer() {
  let cavaWidget = null;
  return /* @__PURE__ */ jsx2(
    "box",
    {
      setup: (self) => {
        self.set_size_request(CavaConfig.barWidth * CavaConfig.bars, CavaConfig.barHeight);
        cavaWidget = new Cava();
        self.append(cavaWidget);
      },
      onDestroy: () => {
        if (cavaWidget) {
          cavaWidget.destroy();
          cavaWidget = null;
        }
        if (handler && cavaInstance) {
          try {
            cavaInstance.disconnect(handler);
          } catch (error) {
            console.warn("Erro ao limpar handler do Cava:", error);
          }
          handler = null;
        }
      }
    }
  );
}

// modules/Media.tsx
var mediaState = Variable(
  {
    currentState: "Nada tocando...",
    currentCss: "",
    lastPlayer: null,
    handlers: []
  }
);
var updateTimeout = null;
var DEBOUNCE_DELAY = 100;
var mpris = Mpris.get_default();
function disconnectFromPlayer() {
  const state = mediaState.get();
  if (updateTimeout) {
    default2.source_remove(updateTimeout);
    updateTimeout = null;
  }
  if (state.lastPlayer && state.handlers.length > 0) {
    state.handlers.forEach((handler2) => {
      if (state.lastPlayer && GObject2.signal_handler_is_connected(state.lastPlayer, handler2)) {
        state.lastPlayer.disconnect(handler2);
      }
    });
  }
  mediaState.set({
    ...state,
    lastPlayer: null,
    handlers: [],
    currentCss: "",
    currentState: "Nada tocando..."
  });
}
function connectToPlayer(player) {
  disconnectFromPlayer();
  if (!player) return;
  try {
    if (!player.busName) return;
  } catch {
    return;
  }
  const handlers2 = [
    player.connect("notify::playback-status", () => {
      updateMediaState(player);
    }),
    player.connect("notify::title", () => {
      updateMediaState(player);
    }),
    player.connect("notify::artist", () => {
      updateMediaState(player);
    }),
    // Alguns players enviam notify::metadata em vez dos campos específicos
    player.connect("notify::metadata", () => {
      updateMediaState(player);
    })
  ];
  mediaState.set({
    ...mediaState.get(),
    lastPlayer: player,
    handlers: handlers2
  });
  updateMediaState(player);
}
function updateMediaState(player) {
  if (updateTimeout) {
    default2.source_remove(updateTimeout);
    updateTimeout = null;
  }
  updateTimeout = default2.timeout_add(default2.PRIORITY_DEFAULT, DEBOUNCE_DELAY, () => {
    executeUpdateMediaState(player);
    updateTimeout = null;
    return default2.SOURCE_REMOVE;
  });
}
function executeUpdateMediaState(player) {
  if (!player) {
    mediaState.set({
      ...mediaState.get(),
      currentCss: "",
      currentState: "Nada tocando..."
    });
    return;
  }
  try {
    if (!player.busName) {
      const nextPlayer = findBestPlayer();
      if (nextPlayer && nextPlayer !== player) {
        connectToPlayer(nextPlayer);
        return;
      }
    }
    const title = player.title || "T\xEDtulo desconhecido";
    const artist = player.artist || "Artista desconhecido";
    const status = player.playbackStatus;
    switch (status) {
      case Mpris.PlaybackStatus.PLAYING:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "MediaPlaying",
          currentState: `Tocando agora: ${title} \u2013 ${artist}`
        });
        break;
      case Mpris.PlaybackStatus.PAUSED:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "MediaPlaying",
          currentState: `Pausado: ${title} \u2013 ${artist}`
        });
        break;
      case Mpris.PlaybackStatus.STOPPED:
      default:
        mediaState.set({
          ...mediaState.get(),
          currentCss: "",
          currentState: "Nada tocando..."
        });
        break;
    }
  } catch (error) {
    console.warn("Erro ao acessar propriedades do player MPRIS:", error);
    const nextPlayer = findBestPlayer();
    if (nextPlayer && nextPlayer !== player) {
      connectToPlayer(nextPlayer);
    } else {
      mediaState.set({
        ...mediaState.get(),
        currentCss: "",
        currentState: "Nada tocando..."
      });
    }
  }
}
function findBestPlayer() {
  const players = mpris.players;
  if (players.length === 0) return null;
  const validPlayers = players.filter((p) => {
    try {
      return p.busName && p.busName.length > 0;
    } catch {
      return false;
    }
  });
  if (validPlayers.length === 0) return null;
  const playingPlayer = validPlayers.find((p) => {
    try {
      return p.playbackStatus === Mpris.PlaybackStatus.PLAYING;
    } catch {
      return false;
    }
  });
  if (playingPlayer) {
    return playingPlayer;
  }
  const pausedPlayer = validPlayers.find((p) => {
    try {
      return p.playbackStatus === Mpris.PlaybackStatus.PAUSED;
    } catch {
      return false;
    }
  });
  if (pausedPlayer) {
    return pausedPlayer;
  }
  return validPlayers[0];
}
function initializeMpris() {
  console.log("Inicializando MPRIS...");
  const initialPlayer = findBestPlayer();
  if (initialPlayer) {
    connectToPlayer(initialPlayer);
  } else {
    console.log("Nenhum player dispon\xEDvel na inicializa\xE7\xE3o");
  }
}
var mprisHandlers = [];
function setupMprisHandlers() {
  mprisHandlers = [
    mpris.connect("player-added", (_, player) => {
      const currentPlayer = mediaState.get().lastPlayer;
      if (!currentPlayer) {
        connectToPlayer(player);
      } else {
        try {
          if (player.playbackStatus === Mpris.PlaybackStatus.PLAYING) {
            connectToPlayer(player);
          }
        } catch (error) {
          console.warn("Erro ao verificar status do novo player:", error);
        }
      }
    }),
    mpris.connect("player-closed", (_, player) => {
      const currentPlayer = mediaState.get().lastPlayer;
      if (currentPlayer === player) {
        const nextPlayer = findBestPlayer();
        if (nextPlayer) {
          connectToPlayer(nextPlayer);
        } else {
          disconnectFromPlayer();
        }
      }
    })
  ];
}
function MprisInfo() {
  return /* @__PURE__ */ jsx2("box", { cssClasses: ["MprisInfo"], vexpand: true, children: /* @__PURE__ */ jsx2(
    "label",
    {
      cssClasses: ["MprisLabel"],
      label: bind(mediaState).as((c) => c.currentState),
      ellipsize: 3,
      maxWidthChars: 75
    }
  ) });
}
function Media() {
  initializeMpris();
  setupMprisHandlers();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      cssClasses: bind(mediaState).as((m) => ["Media", m.currentCss]),
      orientation: Gtk4.Orientation.VERTICAL,
      setup: (self) => {
        const click = new Gtk4.GestureClick();
        click.set_button(Gdk2.BUTTON_PRIMARY);
        const clickHandler = click.connect("pressed", () => {
          const player = mediaState.get().lastPlayer;
          if (player) {
            try {
              player.play_pause();
              default2.timeout_add(default2.PRIORITY_DEFAULT, 100, () => {
                executeUpdateMediaState(player);
                return default2.SOURCE_REMOVE;
              });
            } catch (error) {
              console.warn("Erro ao pausar/tocar:", error);
            }
          }
        });
        self.add_controller(click);
        self._clickHandler = clickHandler;
        self._clickController = click;
      },
      onDestroy: () => {
        disconnectFromPlayer();
        mediaState.drop();
        mprisHandlers.forEach((h) => {
          if (GObject2.signal_handler_is_connected(mpris, h)) {
            mpris.disconnect(h);
          }
        });
        mprisHandlers = [];
        if (updateTimeout) {
          default2.source_remove(updateTimeout);
          updateTimeout = null;
        }
      },
      children: [
        /* @__PURE__ */ jsx2(CavaContainer, {}),
        /* @__PURE__ */ jsx2(MprisInfo, {})
      ]
    }
  );
}

// widget/Background.tsx
function Background(gdkmonitor) {
  const { BOTTOM, RIGHT, LEFT } = Astal6.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      visible: true,
      gdkmonitor,
      exclusivity: Astal6.Exclusivity.IGNORE,
      layer: Astal6.Layer.BOTTOM,
      anchor: BOTTOM | LEFT | RIGHT,
      application: app_default,
      popup: false,
      children: /* @__PURE__ */ jsxs("centerbox", { cssClasses: ["Background"], halign: Gtk4.Align.FILL, children: [
        /* @__PURE__ */ jsx2("box", { cssClasses: ["BackgroundLeftModules"], halign: Gtk4.Align.START, children: /* @__PURE__ */ jsx2(Media, {}) }),
        /* @__PURE__ */ jsx2("box", { cssClasses: ["BackgroundLeftModules"], halign: Gtk4.Align.CENTER, hexpand: true }),
        /* @__PURE__ */ jsx2("box", { cssClasses: ["BackgroundRightModules"], halign: Gtk4.Align.END, children: /* @__PURE__ */ jsx2(DateTime, {}) })
      ] })
    }
  );
}

// app.ts
app_default.start({
  instanceName: "AgsEcosystem",
  css: "",
  main() {
    const provider = new Gtk4.CssProvider();
    provider.load_from_string(style_default);
    Gtk4.StyleContext.add_provider_for_display(Gdk2.Display.get_default(), provider, Gtk4.STYLE_PROVIDER_PRIORITY_USER);
    app_default.get_monitors().map(
      (monitor) => {
        Bar(monitor);
        Background(monitor);
      }
    );
  }
});
//# sourceMappingURL=data:application/json;base64,
